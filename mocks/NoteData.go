// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"
	notes "test_backend/features/notes"

	mock "github.com/stretchr/testify/mock"
)

// NoteData is an autogenerated mock type for the NotesDataInterface type
type NoteData struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *NoteData) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: _a0, ctx
func (_m *NoteData) Insert(_a0 notes.NotesEntity, ctx context.Context) (string, error) {
	ret := _m.Called(_a0, ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(notes.NotesEntity, context.Context) (string, error)); ok {
		return rf(_a0, ctx)
	}
	if rf, ok := ret.Get(0).(func(notes.NotesEntity, context.Context) string); ok {
		r0 = rf(_a0, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(notes.NotesEntity, context.Context) error); ok {
		r1 = rf(_a0, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: ctx
func (_m *NoteData) SelectAll(ctx context.Context) ([]notes.NotesEntity, error) {
	ret := _m.Called(ctx)

	var r0 []notes.NotesEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]notes.NotesEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []notes.NotesEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]notes.NotesEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: ctx, id
func (_m *NoteData) SelectById(ctx context.Context, id string) (notes.NotesEntity, error) {
	ret := _m.Called(ctx, id)

	var r0 notes.NotesEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (notes.NotesEntity, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) notes.NotesEntity); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(notes.NotesEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: ctx, id, note
func (_m *NoteData) UpdateById(ctx context.Context, id string, note notes.NotesEntity) error {
	ret := _m.Called(ctx, id, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, notes.NotesEntity) error); ok {
		r0 = rf(ctx, id, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNoteData interface {
	mock.TestingT
	Cleanup(func())
}

// NewNoteData creates a new instance of NoteData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNoteData(t mockConstructorTestingTNewNoteData) *NoteData {
	mock := &NoteData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
